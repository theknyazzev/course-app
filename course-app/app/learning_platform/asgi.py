import os
import django
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'learning_platform.settings')

# Initialize Django BEFORE importing anything that might use models
django.setup()

# Now we can safely import modules that use models
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
from . import routing

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ASGI
def check_startup_connections():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –≤—ã–≤–æ–¥–æ–º"""
    import socket
    import redis
    from django.conf import settings
    
    print("\n" + "=" * 70)
    print("üöÄ LEARNING PLATFORM ASGI SERVER")
    print("=" * 70)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º IP –∞–¥—Ä–µ—Å–∞
    hostname = socket.gethostname()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
    except:
        local_ip = socket.gethostbyname(hostname)
    
    print(f"üìç –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞:")
    print(f"   üåê –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø:     http://127.0.0.1:8000")
    print(f"   üîó –°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø:       http://{local_ip}:8000")
    print(f"   üë§ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ: http://127.0.0.1:8000/admin/")
    print(f"   ÔøΩ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–µ—Ç–µ–≤–∞—è:  http://{local_ip}:8000/admin/")
    print(f"   ÔøΩüíª –•–æ—Å—Ç: {hostname}")
    print(f"   üåç IP –∞–¥—Ä–µ—Å: {local_ip}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    print("üìä POSTGRESQL:")
    try:
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()[0]
            db_name = connection.settings_dict['NAME']
            cursor.execute("SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';")
            table_count = cursor.fetchone()[0]
        print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î: {db_name}")
        print(f"   üìã –¢–∞–±–ª–∏—Ü –≤ –ë–î: {table_count}")
        print(f"   üóÑÔ∏è  –í–µ—Ä—Å–∏—è: {version[:40]}...")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    print("üî¥ REDIS:")
    try:
        from django.core.cache import cache
        
        # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ Django cache
        cache.set('startup_test', 'ok', timeout=10)
        result = cache.get('startup_test')
        cache.delete('startup_test')
        
        if result == 'ok':
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis
            redis_client = redis.Redis(
                host=settings.REDIS_HOST,
                port=settings.REDIS_PORT,
                password=settings.REDIS_PASSWORD if settings.REDIS_PASSWORD else None,
                db=settings.REDIS_DB,
                decode_responses=True
            )
            info = redis_client.info()
            redis_version = info.get('redis_version', 'Unknown')
            memory = info.get('used_memory_human', 'Unknown')
            clients = info.get('connected_clients', 0)
            
            print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis: {settings.REDIS_HOST}:{settings.REDIS_PORT}")
            print(f"   üìä –í–µ—Ä—Å–∏—è: {redis_version}")
            print(f"   üíæ –ü–∞–º—è—Ç—å: {memory}")
            print(f"   üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {clients}")
        else:
            print("   ‚ùå Redis: —Ç–µ—Å—Ç –∫—ç—à–∞ –Ω–µ –ø—Ä–æ—à–µ–ª")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        print("   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: redis-server.exe")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSockets
    print("üåê WEBSOCKETS:")
    try:
        from channels.layers import get_channel_layer
        channel_layer = get_channel_layer()
        if channel_layer:
            print("   ‚úÖ Channel Layer –≥–æ—Ç–æ–≤ –¥–ª—è WebSocket")
            print("   üîÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–∫–ª—é—á–µ–Ω–∞")
        else:
            print("   ‚ùå Channel Layer –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π
    print("üîë –°–ï–°–°–ò–ò:")
    try:
        from django.contrib.sessions.backends.cache import SessionStore
        session = SessionStore()
        session['test'] = 'ok'
        session.save()
        
        new_session = SessionStore(session_key=session.session_key)
        if new_session.get('test') == 'ok':
            print("   ‚úÖ –°–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ Redis")
            print(f"   ‚è∞ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: {settings.SESSION_COOKIE_AGE // 86400} –¥–Ω–µ–π")
            new_session.delete()
        else:
            print("   ‚ùå –°–µ—Å—Å–∏–∏: —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
    
    print()
    print("=" * 70)
    print("üéâ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 70)

# –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
check_startup_connections()

# Get the ASGI application
django_asgi_app = get_asgi_application()

application = ProtocolTypeRouter({
    "http": django_asgi_app,
    "websocket": AuthMiddlewareStack(
        URLRouter(
            routing.websocket_urlpatterns
        )
    ),
})
